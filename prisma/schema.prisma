// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["mongoDb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.String
  access_token       String?  @db.String
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.String
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom fields
  bio String @default("Empty bio!!")
  createdAt DateTime @default(now())
  username  String? @unique
  profile_emoji String @default("üò∂‚Äçüå´Ô∏è")
  comments Comment[]
  postOverviews PostOverview[]
  followers Follows[] @relation("follower")
  following Follows[] @relation("following")
  commentLikes CommentLike[]
}

model Follows {
  follower    User @relation("follower", fields: [followerId], references: [id])
  followerId  String
  following   User @relation("following", fields: [followingId], references: [id])
  followingId String 
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
}

model Comment {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  isTopLevel Boolean @default(true)
  parentId String?
  parentComment Comment? @relation("childParentComment", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  childComments Comment[] @relation("childParentComment")
  content String
  createdAt DateTime @default(now())
  userId String
  createdBy User? @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  post_id String
  post Post? @relation(fields: [post_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  commentLikes CommentLike[]
}

model Post {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  comments Comment[]
  postOverview PostOverview?
}

model PostOverview {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  createdBy User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  postId String
  createdAt DateTime @default(now())
  post Post @relation(fields: [postId], references: [id])
  post_emoji String @default("üìù")
  post_title String
}

model CommentLike {
  id  String  @id @default(auto()) @map("_id") @db.ObjectId
  userId String
  createdBy User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdAt DateTime @default(now())
  commentId String
  comment Comment @relation(fields: [commentId], references: [id])
}